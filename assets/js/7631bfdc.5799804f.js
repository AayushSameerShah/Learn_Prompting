"use strict";(self.webpackChunkpromptgineering=self.webpackChunkpromptgineering||[]).push([[5123],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,p=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=c(r),f=o,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||p;return r?n.createElement(d,a(a({ref:t},l),{},{components:r})):n.createElement(d,a({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var p=r.length,a=new Array(p);a[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<p;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2015:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const p=r.p+"assets/images/openprompt-f07d4839f2e8035198a0db9a89391286.gif",a={sidebar_position:16},i="OpenPrompt",s={unversionedId:"IDEs/openprompt",id:"IDEs/openprompt",title:"OpenPrompt",description:"OpenPrompt is a Python library",source:"@site/docs/IDEs/openprompt.md",sourceDirName:"IDEs",slug:"/IDEs/openprompt",permalink:"/docs/IDEs/openprompt",draft:!1,editUrl:"https://github.com/trigaten/promptgineering/tree/v0.0.2/docs/IDEs/openprompt.md",tags:[],version:"current",sidebarPosition:16,frontMatter:{sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:"Lang Chain",permalink:"/docs/IDEs/langchain"},next:{title:"OpenAI DALLE IDE",permalink:"/docs/IDEs/DALLE"}},c={},l=[{value:"Features",id:"features",level:2}],u={toc:l};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"openprompt"},"OpenPrompt"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://thunlp.github.io/OpenPrompt/index.html"},"OpenPrompt")," is a Python library\nthat provides various functionality for building and testing prompts."),(0,o.kt)("div",{style:{textAlign:"center"}},(0,o.kt)("img",{src:p,style:{width:"750px"}})),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("p",null,"OpenPrompt supports models from huggingface, but not yet OpenAI. It focuses more\non datasets and testing than chaining. OpenPrompt also appears to support\nsoft-prompting via ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/thunlp/OpenDelta"},"https://github.com/thunlp/OpenDelta"),"."))}m.isMDXComponent=!0}}]);